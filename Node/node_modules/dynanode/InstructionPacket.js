var InstructionPacket = function(motorID,instruction,params) {
	var bytes = new Buffer(0,'hex');
	
	if(params.length > 0) {
		//0xFF 0xFF ID Length Inst Parms CS
		bytes = new Buffer(2+1+1+1+parms.length+1,'hex');
		var indx = 0;
		bytes.writeUInt8(0xFF,indx++);
		bytes.writeUInt8(0xFF,indx++);
		bytes.writeUInt8(motorID,indx++);
		bytes.writeUInt8(params.length+2,indx++);
		bytes.writeUInt8(instruction,indx++);
		var cs = motorID+params.length+2+instruction;
		for(var i=0; i<params.length; i++) {
			bytes.writeUInt8(params[i],indx++);
			cs+=params[i];
		}
		cs = ~cs & 255;
		bytes.writeUInt8(cs,indx++);
	}
	
	this.getBytes = function() {
		return bytes;
	};
	
	this.toString = function() {
		return bytes.toString('hex');
	};
};

InstructionPacket.getWriteRegister = function(motorID,registerAddress,numBytes,value) {

};

InstructionPacket.getReadRegister = function(motorID,registerAddress,numBytes) {

};

module.exports = InstructionPacket;